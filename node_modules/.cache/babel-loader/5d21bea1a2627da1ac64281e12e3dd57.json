{"remainingRequest":"/Users/wangshi/backend/vue-admin-template/node_modules/babel-loader/lib/index.js!/Users/wangshi/backend/vue-admin-template/node_modules/eslint-loader/index.js??ref--13-0!/Users/wangshi/backend/vue-admin-template/src/utils/util.js","dependencies":[{"path":"/Users/wangshi/backend/vue-admin-template/src/utils/util.js","mtime":1549957426865},{"path":"/Users/wangshi/backend/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangshi/backend/vue-admin-template/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wangshi/backend/vue-admin-template/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/wangshi/backend/vue-admin-template/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"/Users/wangshi/backend/vue-admin-template/node_modules/@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.util = void 0;\n\nvar _parseInt2 = _interopRequireDefault(require(\"/Users/wangshi/backend/vue-admin-template/node_modules/@babel/runtime-corejs2/core-js/parse-int\"));\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\n/**\n * 工具类\n * @return {[type]} [description]\n */\nvar util = {\n  version: '2.0.0'\n  /**\n   * 隐藏手机和身份证中间数字，只显示前3和后4位数字，中间星号\n   * @param  {[String]}  value 待处理的号码\n   * @return {[String]}  处理好的号码\n   */\n\n};\nexports.util = util;\n\nutil.doHide = function (value) {\n  var v = value.replace(/\\s+/g, '').replace(/\\r\\n/g, '').replace(/\\n/g, '');\n  var reg = /^(\\d{3})(\\d+)(\\d{4}|\\d{3}(x|X))$/;\n  return v.replace(reg, '$1****$3');\n};\n/**\n * 判断密码试试符合要求,对应的验证规则是：密码中必须包含字母、数字、特称字符，至少8个字符，最多20个字符\n * @param  {[String]}  value 待验证的参数\n * @return {[String]}  ture-符合，false-不符合\n */\n\n\nutil.isGoodPassword = function (value) {\n  var reg = /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{8,20}$/;\n\n  if (reg.test(value)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * 判断参数是否为空\n * @param  {[String]}  value 待验证的参数\n * @return {Boolean}   ture-空，false-不为空\n */\n\n\nutil.isEmpty = function (value) {\n  if (typeof value === 'undefined' || value === null || value === '') {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * 时间戳转日期\n *\n */\n\n\nfunction add0(m) {\n  return m < 10 ? '0' + m : m;\n}\n\nutil.transTime = function (str) {\n  if (!str) return;\n  var time = new Date(str);\n  var y = time.getFullYear();\n  var m = time.getMonth() + 1;\n  var d = time.getDate();\n  var h = time.getHours();\n  var mm = time.getMinutes();\n  var s = time.getSeconds();\n  return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h) + ':' + add0(mm) + ':' + add0(s); // return y + '年' + add0(m) + '月' + add0(d) + '日'\n};\n/**\n * 判断手机号码格式\n * @param  {[String]}  value 待验证的参数\n * @return {Boolean}   ture-正确，false-不正确\n */\n\n\nutil.isMobile = function (value) {\n  var reg = /^(1+\\d{10})$/;\n\n  if (reg.test(value)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * 判断是否是数字\n * @param  {[String]}  value 待验证的参数\n * @return {Boolean}   ture-正确，false-不正确\n */\n\n\nutil.isNum = function (value) {\n  var reg = /^([0-9]*[1-9][0-9]*(.[0-9]+)?|[0]+.[0-9]*[1-9][0-9]*)$/;\n\n  if (reg.test(value)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * 判断是否是汉字和字母\n * @param  {[String]}  value 待验证的参数\n * @return {Boolean}   ture-正确，false-不正确\n */\n\n\nutil.isCharacter = function (value) {\n  var reg = /^[a-zA-Z\\u4e00-\\u9fa5]+$/;\n\n  if (reg.test(value)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * 判断身份证格式\n * @param  {[String]}  value 待验证的参数\n * @return {Boolean}   ture-符合规范，false-不符合规范\n */\n\n\nutil.isIdentityCard = function (value) {\n  var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n\n  if (reg.test(value)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * 判断邮箱格式\n * @param  {[String]}  value 待验证的参数\n * @return {Boolean}   ture-符合规范，false-不符合规范\n */\n\n\nutil.isEmail = function (value) {\n  var reg = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\n\n  if (reg.test(value)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * 根据文件名获取文件后缀。例：'xxxxx.jpg.EXE' 返回 'exe'\n * @param  {String} fileName 文件名\n * @return {String}          小写形式的后缀名\n */\n\n\nutil.getFileSuffix = function (fileName) {\n  var suffix = '';\n  var index = fileName.lastIndexOf('.');\n\n  if (index > -1) {\n    suffix = fileName.substring(index + 1).toLowerCase();\n  }\n\n  return suffix;\n};\n/**\n * 时间格式化\n * @param  {[Date]} date   要格式化的时间对象\n * @param  {[String]} format 格式，例如\"yyyy-MM-dd HH:mm:ss\"\n * @return {[String]}        格式化后的时间字符串\n */\n\n\nutil.dateFormat = function (date, format) {\n  var zeroPadding = function zeroPadding(i) {\n    return (i < 10 ? '0' : '') + i;\n  };\n\n  return format.replace(/yyyy|MM|dd|HH|mm|ss/g, function (item) {\n    switch (item) {\n      case 'yyyy':\n        return zeroPadding(date.getFullYear());\n\n      case 'MM':\n        return zeroPadding(date.getMonth() + 1);\n\n      case 'dd':\n        return zeroPadding(date.getDate());\n\n      case 'HH':\n        return zeroPadding(date.getHours());\n\n      case 'mm':\n        return zeroPadding(date.getMinutes());\n\n      case 'ss':\n        return zeroPadding(date.getSeconds());\n    }\n  });\n};\n/**\n * 获取两个日期之间的间隔天数。两个日期的格式为：yyyy-MM-dd\n * @param  {[String]} beginDate 开始日期。例：2016-01-01\n * @param  {[String]} endDate   结束日期。例：2016-07-23\n * @return {[int]}           间隔天数\n */\n\n\nutil.getIntervalDays = function (beginDate, endDate) {\n  var beginArr = beginDate.split('-');\n  var endArr = endDate.split('-');\n  var begin = new Date(beginArr[0], beginArr[1] - 1, beginArr[2]).getTime();\n  var end = new Date(endArr[0], endArr[1] - 1, endArr[2]).getTime();\n  var temp = (end - begin) / (1000 * 60 * 60 * 24);\n  return temp;\n  /* if (temp < 0) {\n    return temp === temp - 1\n  } else {\n    return temp === temp + 1\n  }*/\n};\n/**\n * 获取URL中参数的的值\n * @param  {[String]} key 参数名称\n * @return {[String]}     参数值\n */\n\n\nutil.getParameter = function (key) {\n  var url = location.href;\n  var paraString = url.substring(url.indexOf('?') + 1, url.length).split('&');\n  var paraObj = {};\n\n  for (var i = 0, len = paraString.length; i < len; i++) {\n    var j = paraString[i];\n    paraObj[j.substring(0, j.indexOf('=')).toLowerCase()] = j.substring(j.indexOf('=') + 1, j.length);\n  }\n\n  var returnValue = paraObj[key.toLowerCase()];\n\n  if (typeof returnValue === 'undefined') {\n    return '';\n  } else {\n    return returnValue;\n  }\n};\n/**\n * 设置cookie值\n * @param  {[String]} key 参数名称\n * @param  {[String]} value 参数值\n * @param  {[int]} sec 是小时间。单位：秒\n * @return {[String]}\n */\n\n\nutil.setCookie = function (key, value, sec) {\n  var cookieStr = key + '=' + escape(value);\n\n  if (!util.isEmpty(sec)) {\n    var exp = new Date();\n    exp.setTime(exp.getTime() + sec * 1000);\n    cookieStr += ';expires=' + exp.toGMTString();\n  }\n\n  cookieStr += ';path=/';\n  document.cookie = cookieStr;\n};\n/**\n * 获取cookie中参数的的值\n * @param  {[String]} key 参数名称\n * @return {[String]}     参数值\n */\n\n\nutil.getCookie = function (key) {\n  var arr = document.cookie.match(new RegExp('(^| )' + key + '=([^;]*)(;|$)'));\n\n  if (arr === null || arr === '') {\n    return '';\n  } else {\n    return unescape(arr[2]);\n  }\n};\n/**\n * 清除cookie中的值\n * @param  {[String]} key 参数名称\n * @return\n */\n\n\nutil.clearCookie = function (key) {\n  var exp = new Date();\n  exp.setTime(exp.getTime() - 1);\n  var value = util.getCookie(key);\n\n  if (!util.isEmpty(value)) {\n    document.cookie = key + '=' + value + ';expires=' + exp.toGMTString();\n  }\n};\n/**\n * 秒格式化。转换成：时分秒。例：4230秒 转换成 1小时10分30秒\n * @param   int seconds\n * @return  String\n */\n\n\nutil.secondFormat = function (seconds) {\n  var theTime = (0, _parseInt2.default)(seconds); // 秒\n\n  var theTime1 = 0; // 分\n\n  var theTime2 = 0; // 小时\n\n  if (theTime > 60) {\n    theTime1 = (0, _parseInt2.default)(theTime / 60);\n    theTime = (0, _parseInt2.default)(theTime % 60);\n\n    if (theTime1 > 60) {\n      theTime2 = (0, _parseInt2.default)(theTime1 / 60);\n      theTime1 = (0, _parseInt2.default)(theTime1 % 60);\n    }\n  }\n\n  var result = '' + (0, _parseInt2.default)(theTime) + '秒';\n\n  if (theTime1 > 0) {\n    result = '' + (0, _parseInt2.default)(theTime1) + '分' + result;\n  }\n\n  if (theTime2 > 0) {\n    result = '' + (0, _parseInt2.default)(theTime2) + '小时' + result;\n  }\n\n  return result;\n};\n/**\n * base 64位加密解密\n */\n\n\nutil.base64 = function (dir, input) {\n  var publ = {};\n  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='; // http://phpjs.org/functions/base64_encode/\n\n  publ.encode = function (data) {\n    data = unescape(encodeURIComponent(data));\n    if (data === '') return;\n    var o1;\n    var o2;\n    var o3;\n    var h1;\n    var h2;\n    var h3;\n    var h4;\n    var bits;\n    var i = 0;\n    var ac = 0;\n    var enc = '';\n    var tmpArr = [];\n    if (!data) return data;\n\n    do {\n      o1 = data.charCodeAt(i++);\n      o2 = data.charCodeAt(i++);\n      o3 = data.charCodeAt(i++);\n      bits = o1 << 16 | o2 << 8 | o3;\n      h1 = bits >> 18 & 0x3f;\n      h2 = bits >> 12 & 0x3f;\n      h3 = bits >> 6 & 0x3f;\n      h4 = bits & 0x3f;\n      tmpArr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n    } while (i < data.length);\n\n    enc = tmpArr.join('');\n    var r = data.length % 3;\n    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\n  }; // http://phpjs.org/functions/base64_decode/\n\n\n  publ.decode = function (data) {\n    var o1;\n    var o2;\n    var o3;\n    var h1;\n    var h2;\n    var h3;\n    var h4;\n    var bits;\n    var i = 0;\n    var ac = 0;\n    var dec = '';\n    var tmpArr = [];\n    if (!data) return data;\n    data += '';\n\n    do {\n      // unpack four hexets into three octets using index points in b64\n      h1 = b64.indexOf(data.charAt(i++));\n      h2 = b64.indexOf(data.charAt(i++));\n      h3 = b64.indexOf(data.charAt(i++));\n      h4 = b64.indexOf(data.charAt(i++));\n      bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n      o1 = bits >> 16 & 0xff;\n      o2 = bits >> 8 & 0xff;\n      o3 = bits & 0xff;\n\n      if (h3 === 64) {\n        tmpArr[ac++] = String.fromCharCode(o1);\n      } else if (h4 === 64) {\n        tmpArr[ac++] = String.fromCharCode(o1, o2);\n      } else {\n        tmpArr[ac++] = String.fromCharCode(o1, o2, o3);\n      }\n    } while (i < data.length);\n\n    dec = tmpArr.join('');\n    return decodeURIComponent(escape(dec));\n  };\n\n  return input ? publ[dir](input) : dir ? null : publ;\n};\n/**\n * 对内容加密\n * @param {[String]} mingwen 加密明文\n * @param {[int]} times 加密次数\n */\n\n\nutil.encodeBase64 = function (mingwen, times) {\n  var code = '';\n  var num = 1;\n\n  if (typeof times === 'undefined' || times === null || times === '') {\n    num = 1;\n  } else {\n    var vt = times + '';\n    num = (0, _parseInt2.default)(vt);\n  }\n\n  if (typeof mingwen === 'undefined' || mingwen === null || mingwen === '') {} else {\n    util.base64.utf8encode = true;\n    code = mingwen;\n\n    for (var i = 0; i < num; i++) {\n      code = util.base64('encode', code);\n    }\n  }\n\n  return code;\n};\n/**\n * 对加密内容进行解密\n * @param {[String]} mi 要解密内容\n * @param {[int]} times 解密次数\n */\n\n\nutil.decodeBase64 = function (mi, times) {\n  var mingwen = '';\n  var num = 1;\n\n  if (typeof times === 'undefined' || times === null || times === '') {\n    num = 1;\n  } else {\n    var vt = times + '';\n    num = (0, _parseInt2.default)(vt);\n  }\n\n  if (typeof mi === 'undefined' || mi === null || mi === '') {} else {\n    util.base64.utf8encode = true;\n    mingwen = mi;\n\n    for (var i = 0; i < num; i++) {\n      // console.log(mingwen)\n      mingwen = util.base64().decode(mingwen);\n    }\n  }\n\n  return mingwen;\n};\n/**\n * 获取协议+域名\n */\n\n\nutil.baseUrl = function () {\n  var url = location.protocol + '//' + location.host + '/';\n  return url;\n};\n/**\n * 截取字符串长度\n */\n\n\nutil.cutStr = function (text, num) {\n  var arr = text.split('');\n  var str = text;\n\n  if (arr.length > (0, _parseInt2.default)(num)) {\n    str = arr.slice(0, num).join('') + '...';\n  }\n\n  return str;\n};\n/**\n * URL中有一些参数（例如常用的authToken）带有特殊符号，浏览器会做转码，转码之后获取会有问题，本次遇到的是+变成了空格（%20）\n * 在对URL参数赋值之前对特殊字符做处理\n */\n\n\nutil.URLencode = function (value) {\n  return value.replace(/\\+/g, '%2B').replace(/\"/g, '%22').replace(/'/g, '%27').replace(/\\//g, '%2F');\n};\n/* 验证中文、英文、数字字符 */\n\n\nutil.validateChart = function (value) {\n  var reg = /[^%&^'*#@\"~;=?$\\x22]+/;\n  return reg.test(value);\n};\n/* 验证正整数 >0 */\n\n\nutil.validateIsIntGt = function (str) {\n  var reg = /^([1-9]\\d*)$/;\n  return reg.test(str);\n};\n/* 验证英文、数字字符 */\n\n\nutil.validateAZ09Chart = function (value) {\n  var reg = /^[A-Za-z0-9]+$/;\n  return reg.test(value);\n}; // 按enter查询\n// util.keyupEnter =function(handleFilter){\n//   document.onkeydown = e =>{\n//     let body = document.getElementsByTagName('body')[0]\n//     if (e.keyCode === 13  && e.target === body) {\n//       handleFilter()\n//     }\n//   }\n// }",null]}